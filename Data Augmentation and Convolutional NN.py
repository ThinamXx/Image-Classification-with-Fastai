# -*- coding: utf-8 -*-
"""Copy of Data Augmentation in Pets

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OAp7fCtBXHzyLKT-1vA2_EFlq_pd0sZE
"""

# Initialization
# Setting up Fast.ai Environment
# I am doing this project on Google Colab using Fast.ai Library. Uncomment the cell below to initialize the Fast.ai on your Google Colab.
# â€œFastai" is the first deep learning library to provide a single consistent interface to all the most commonly used deep learning applications for vision, text, tabular data, time series, and collaborative filtering.
!curl -s https://course.fast.ai/setup/colab | bash

# Commented out IPython magic to ensure Python compatibility.
# I always keep these 3 lines on top of my Notebook, so that it won't create any problem in loading my Notebook again and again.
# %reload_ext autoreload
# %autoreload 2
# %matplotlib inline

# Downloading the Dependencies
from fastai import *
from fastai.vision import *

# Uncomment the Line below to read the Documentation, to access to the Source Code and to know what does untar_data actually do.
# doc(untar_data)

# Getting the Data
# Fastai has its own Dataset sample inorder to make it more handy and easier to work on. But the Datasets are limited and you can only get the Data which has been included in its Dataset using the code written in following cell. Otherwise you should get your own Data.
# Uncomment the Line below to read the Documentation, to access to the Source Code and to know what does untar_data actually do.
# doc(untar_data)
bs = 64
path = untar_data(URLs.PETS)/'images'
path.ls();

# Data Augmentation
# Data augmentation is a strategy that enables practitioners to significantly increase the diversity of data available for training models, without actually collecting new data. Data augmentation techniques such as cropping, padding, and horizontal flipping are commonly used to train large neural networks.

tfms = get_transforms(max_rotate=20, max_zoom=1.3, max_lighting=0.4, max_warp=0.4,
                      p_affine=1., p_lighting=1.)

# If you get confused about any function in this Notebook, I recommend you to do doc(function_name) and try to learn it.
# Uncomment the Line below to know about get_transforms
# doc(get_transforms)

# Creating ImageList
src = ImageList.from_folder(path).split_by_rand_pct(0.2, seed=2)

def get_data(size, bs, padding_mode="reflection"):
  return (src.label_from_re(r'([^/]+)_\d+.jpg$')
          .transform(tfms, size=size, padding_mode=padding_mode)
          .databunch(bs=bs).normalize(imagenet_stats))

data = get_data(224, bs, "zeros")

def _plot(i, j, ax):
  x, y = data.train_ds[3]
  x.show(ax, y=y)

plot_multi(_plot, 3, 3, figsize=(8, 8))

# Now, I want to check with default reflection padding. Apart from that, Fastai has built in function plot_muti which helps to plot multiple plots. You can get more insights about the Fastai built-in functions with doc(function_name).
# data = get_data(224, bs)

plot_multi(_plot, 3, 3, figsize=(8, 8))

# Convolutional Neural Networks
# Training the Model
# Fast.ai has cnn_learner API which creates the Convolutional Neural Networks by passing necessary parameters.
gc.collect()
learn = cnn_learner(data, models.resnet34, metrics=error_rate, bn_final=True)

learn.fit_one_cycle(3, slice(1e-02), pct_start=0.8)

# Using the Whole Dataset. In Fastai, Unfreeze is handy function which helps to select the whole Data.
learn.unfreeze()
learn.fit_one_cycle(3, max_lr=slice(1e-6, 1e-3), pct_start=0.8)

# Now, I want to increase the size of Data
data = get_data(352,bs)
learn.data = data
learn.fit_one_cycle(3, slice(1e-03))

# Saving the Model
learn.save('Data')